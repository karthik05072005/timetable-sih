import { NextResponse } from 'next/server'
import { MongoClient } from 'mongodb'

// MongoDB connection
let client
let db

async function connectToMongo() {
  if (!client) {
    client = new MongoClient(process.env.MONGO_URL)
    await client.connect()
    db = client.db(process.env.DB_NAME)
  }
  return db
}

// Helper function to handle CORS
function handleCORS(response) {
  response.headers.set('Access-Control-Allow-Origin', process.env.CORS_ORIGINS || '*')
  response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
  response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization')
  response.headers.set('Access-Control-Allow-Credentials', 'true')
  return response
}

// Generate simple HTML for client-side PDF generation
function generateSimpleTimetableHTML(timetableData, metadata = {}) {
  const { schedule, summary } = timetableData
  const timeSlots = ['9:00 AM', '10:00 AM', '11:00 AM', '12:00 PM', '1:00 PM', '1:30 PM', '2:30 PM', '3:30 PM']
  const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Timetable - ${metadata.semester || 'Academic'} ${metadata.year || new Date().getFullYear()}</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { text-align: center; margin-bottom: 20px; }
        .header h1 { color: #2563eb; margin-bottom: 10px; }
        .summary { margin-bottom: 20px; text-align: center; }
        .timetable { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
        .timetable th, .timetable td { border: 1px solid #ddd; padding: 8px; text-align: center; }
        .timetable th { background-color: #2563eb; color: white; }
        .time-slot { background-color: #f1f5f9; font-weight: bold; }
        .course { background-color: #dbeafe; padding: 4px; margin: 2px 0; border-radius: 3px; }
        @media print { body { margin: 10px; } }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Academic Timetable</h1>
        <div>${metadata.program || 'B.Ed + FYUP'} ‚Ä¢ ${metadata.semester || 'Fall 2025'}</div>
        <div>Generated on ${new Date().toLocaleDateString()}</div>
      </div>
      
      <div class="summary">
        <strong>Summary:</strong> 
        ${summary?.totalSlots || 0} Total Classes | 
        ${summary?.conflictCount || 0} Conflicts | 
        ${summary?.optimizationScore || 0}% Optimization Score
      </div>
      
      <table class="timetable">
        <tr>
          <th>Time</th>
          ${days.map(day => `<th>${day}</th>`).join('')}
        </tr>
        ${timeSlots.map(time => `
          <tr>
            <td class="time-slot">${time}</td>
            ${days.map(day => {
              const daySchedule = schedule?.[day]?.[time] || []
              return `
                <td>
                  ${daySchedule.map(slot => {
                    const courseData = slot.course || ''
                    const [courseCode, courseName] = courseData.includes(' - ') ? courseData.split(' - ') : [courseData, '']
                    return `
                    <div class="course">
                      <strong>${courseCode}</strong><br>
                      ${courseName}<br>
                      <small>${slot.faculty}<br>${slot.room}</small>
                    </div>
                  `
                  }).join('')}
                </td>
              `
            }).join('')}
          </tr>
        `).join('')}
      </table>
      
      <div style="text-align: center; font-size: 12px; color: #666;">
        Generated by Timetable AI ‚Ä¢ Intelligent Timetable Generation System
      </div>
    </body>
    </html>
  `
}

export async function OPTIONS() {
  return handleCORS(new NextResponse(null, { status: 200 }))
}

export async function POST(request) {
  try {
    const { timetableData, metadata, timetableId } = await request.json()
    
    console.log('üìÑ Starting fallback PDF generation for timetable')
    
    let finalTimetableData = timetableData
    
    // If timetableId is provided, fetch from database
    if (timetableId && !timetableData) {
      try {
        const db = await connectToMongo()
        const timetableRecord = await db.collection('generated_timetables').findOne({ id: timetableId })
        
        if (timetableRecord) {
          finalTimetableData = timetableRecord.timetable
          console.log('üìã Retrieved timetable from database')
        } else {
          throw new Error('Timetable not found in database')
        }
      } catch (dbError) {
        console.warn('Database error, using provided data:', dbError.message)
      }
    }
    
    if (!finalTimetableData) {
      return handleCORS(NextResponse.json(
        { error: "No timetable data provided" },
        { status: 400 }
      ))
    }
    
    // Generate simple HTML for client-side processing
    const html = generateSimpleTimetableHTML(finalTimetableData, metadata)
    
    console.log('‚úÖ Fallback HTML generated successfully')
    
    // Return HTML for client-side PDF generation
    const response = new NextResponse(html, {
      status: 200,
      headers: {
        'Content-Type': 'text/html',
        'Content-Disposition': 'inline'
      }
    })
    
    return handleCORS(response)
    
  } catch (error) {
    console.error('‚ùå Fallback PDF generation error:', error)
    
    return handleCORS(NextResponse.json(
      { error: "Failed to generate PDF fallback: " + error.message },
      { status: 500 }
    ))
  }
}